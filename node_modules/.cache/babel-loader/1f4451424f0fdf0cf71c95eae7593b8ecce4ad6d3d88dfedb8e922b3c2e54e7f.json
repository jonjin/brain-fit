{"ast":null,"code":"import{useState,useCallback,useEffect,useRef}from'react';const EEG_SERVICE_UUID='heart_rate';const useEEG=()=>{const[isConnected,setIsConnected]=useState(false);const[eegData,setEEGData]=useState(null);const deviceRef=useRef(null);const simulationTimer=useRef(null);const startDataSimulation=useCallback(()=>{if(simulationTimer.current){return;}simulationTimer.current=window.setInterval(()=>{setEEGData({attention:Math.random()*0.3+0.7,meditation:Math.random()*0.5+0.5,delta:Math.random(),theta:Math.random(),alpha:Math.random(),beta:Math.random(),gamma:Math.random(),timestamp:Date.now()});},1000);},[]);const stopDataSimulation=useCallback(()=>{if(simulationTimer.current){window.clearInterval(simulationTimer.current);simulationTimer.current=null;}},[]);const connectDevice=useCallback(async()=>{try{var _device$gatt;const device=await navigator.bluetooth.requestDevice({filters:[{services:[EEG_SERVICE_UUID]}],optionalServices:['battery_service']});deviceRef.current=device;const server=await((_device$gatt=device.gatt)===null||_device$gatt===void 0?void 0:_device$gatt.connect());if(!server){throw new Error('Unable to connect to EEG device');}setIsConnected(true);startDataSimulation();}catch(error){console.error('Failed to connect to EEG device',error);}},[startDataSimulation]);const disconnect=useCallback(()=>{var _deviceRef$current,_deviceRef$current$ga;stopDataSimulation();if((_deviceRef$current=deviceRef.current)!==null&&_deviceRef$current!==void 0&&(_deviceRef$current$ga=_deviceRef$current.gatt)!==null&&_deviceRef$current$ga!==void 0&&_deviceRef$current$ga.connected){deviceRef.current.gatt.disconnect();}deviceRef.current=null;setIsConnected(false);setEEGData(null);},[stopDataSimulation]);useEffect(()=>{return()=>{disconnect();};},[disconnect]);return{isConnected,eegData,connectDevice,disconnect};};export default useEEG;","map":{"version":3,"names":["useState","useCallback","useEffect","useRef","EEG_SERVICE_UUID","useEEG","isConnected","setIsConnected","eegData","setEEGData","deviceRef","simulationTimer","startDataSimulation","current","window","setInterval","attention","Math","random","meditation","delta","theta","alpha","beta","gamma","timestamp","Date","now","stopDataSimulation","clearInterval","connectDevice","_device$gatt","device","navigator","bluetooth","requestDevice","filters","services","optionalServices","server","gatt","connect","Error","error","console","disconnect","_deviceRef$current","_deviceRef$current$ga","connected"],"sources":["/Users/apple-dev/Desktop/test3/brain-fit/src/hooks/useEEG.ts"],"sourcesContent":["import { useState, useCallback, useEffect, useRef } from 'react';\n\nexport interface EEGData {\n  attention: number;\n  meditation: number;\n  delta: number;\n  theta: number;\n  alpha: number;\n  beta: number;\n  gamma: number;\n  timestamp: number;\n}\n\ntype BluetoothDeviceWithGatt = BluetoothDevice & {\n  gatt?: BluetoothRemoteGATTServer | null;\n};\n\nconst EEG_SERVICE_UUID = 'heart_rate';\n\nconst useEEG = () => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [eegData, setEEGData] = useState<EEGData | null>(null);\n  const deviceRef = useRef<BluetoothDeviceWithGatt | null>(null);\n  const simulationTimer = useRef<number | null>(null);\n\n  const startDataSimulation = useCallback(() => {\n    if (simulationTimer.current) {\n      return;\n    }\n    simulationTimer.current = window.setInterval(() => {\n      setEEGData({\n        attention: Math.random() * 0.3 + 0.7,\n        meditation: Math.random() * 0.5 + 0.5,\n        delta: Math.random(),\n        theta: Math.random(),\n        alpha: Math.random(),\n        beta: Math.random(),\n        gamma: Math.random(),\n        timestamp: Date.now(),\n      });\n    }, 1000);\n  }, []);\n\n  const stopDataSimulation = useCallback(() => {\n    if (simulationTimer.current) {\n      window.clearInterval(simulationTimer.current);\n      simulationTimer.current = null;\n    }\n  }, []);\n\n  const connectDevice = useCallback(async () => {\n    try {\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{ services: [EEG_SERVICE_UUID] }],\n        optionalServices: ['battery_service'],\n      });\n\n      deviceRef.current = device;\n      const server = await device.gatt?.connect();\n      if (!server) {\n        throw new Error('Unable to connect to EEG device');\n      }\n\n      setIsConnected(true);\n      startDataSimulation();\n    } catch (error) {\n      console.error('Failed to connect to EEG device', error);\n    }\n  }, [startDataSimulation]);\n\n  const disconnect = useCallback(() => {\n    stopDataSimulation();\n    if (deviceRef.current?.gatt?.connected) {\n      deviceRef.current.gatt.disconnect();\n    }\n    deviceRef.current = null;\n    setIsConnected(false);\n    setEEGData(null);\n  }, [stopDataSimulation]);\n\n  useEffect(() => {\n    return () => {\n      disconnect();\n    };\n  }, [disconnect]);\n\n  return {\n    isConnected,\n    eegData,\n    connectDevice,\n    disconnect,\n  };\n};\n\nexport default useEEG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}